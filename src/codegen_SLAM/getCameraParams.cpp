//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
// File: getCameraParams.cpp
//
// MATLAB Coder version            : 2.8
// C/C++ source code generated on  : 06-Aug-2015 16:40:53
//

// Include Files
#include "rt_nonfinite.h"
#include "SLAM.h"
#include "getCameraParams.h"
#include <stdio.h>

// Function Definitions

//
// Autogenerated function that constructs and returns a hard coded struct.
//  Generated on 05-Aug-2015 10:56:55.
// Arguments    : f_struct_T *params
// Return Type  : void
//
void getCameraParams(f_struct_T *params)
{
  int i;
  static const double dv0[3] = { -0.401250937863819, 0.193995986374922,
    -0.0528652448245847 };

  static const double dv1[9] = { 541.959687988851, 0.0, 371.925237873738, 0.0,
    543.682179911237, 229.149201322433, 0.0, 0.0, 1.0 };

  static const double dv2[9] = { 541.959687988851, 0.0, 0.0, 0.0,
    543.682179911237, 0.0, 371.925237873738, 229.149201322433, 1.0 };

  static const char cv0[30] = { 'C', 'o', 'm', 'p', 'u', 't', 'e', 'r', ' ', 'V',
    'i', 's', 'i', 'o', 'n', ' ', 'S', 'y', 's', 't', 'e', 'm', ' ', 'T', 'o',
    'o', 'l', 'b', 'o', 'x' };

  static const char cv1[3] = { '6', '.', '2' };

  static const char cv2[8] = { '(', 'R', '2', '0', '1', '5', 'a', ')' };

  static const char cv3[11] = { '0', '9', '-', 'F', 'e', 'b', '-', '2', '0', '1',
    '5' };

  static const double dv3[3] = { -0.401762803634968, 0.195993790045115,
    -0.0547939131375746 };

  static const double dv4[9] = { 543.308099976805, 0.0, 393.735383216623, 0.0,
    545.124896535452, 218.682763638397, 0.0, 0.0, 1.0 };

  static const double dv5[9] = { 543.308099976805, 0.0, 0.0, 0.0,
    545.124896535452, 0.0, 393.735383216623, 218.682763638397, 1.0 };

  static const double dv6[9] = { 0.999829042316655, -0.00279551166806386,
    0.0182776162197125, 0.00290536676099935, 0.999977859646126,
    -0.00598657343862809, -0.0182604760109221, 0.00603865316653689,
    0.999815027734525 };

  static const double dv7[3] = { -29.7219640115983, -0.141748332541957,
    -0.206928465831667 };

  static const double dv8[9] = { 1.07633922512695E-8, -7.03274715662856E-7,
    0.00040874984299035, -1.13868802259242E-6, 6.0239260691896E-7,
    -0.0543481308896116, -0.00015685772247503, 0.0546447839961095,
    0.723937853374116 };

  static const double dv9[9] = { 0.00316929256267307, -0.207772471164773,
    0.140472543796319, -0.336353561679571, 0.178533923382226, -29.720244884867,
    -0.224812196767605, 29.7208941259034, 0.182069024120304 };

  static const short iv0[80] = { 0, 0, 0, 0, 0, 120, 120, 120, 120, 120, 240,
    240, 240, 240, 240, 360, 360, 360, 360, 360, 480, 480, 480, 480, 480, 600,
    600, 600, 600, 600, 720, 720, 720, 720, 720, 840, 840, 840, 840, 840, 0, 120,
    240, 360, 480, 0, 120, 240, 360, 480, 0, 120, 240, 360, 480, 0, 120, 240,
    360, 480, 0, 120, 240, 360, 480, 0, 120, 240, 360, 480, 0, 120, 240, 360,
    480, 0, 120, 240, 360, 480 };

  static const signed char iv1[9] = { 1, 0, 0, 0, 1, 0, 0, 0, 1 };

  static const signed char iv2[16] = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 1 };

  static const double dv10[3] = { 0.0297219640115983, 0.000141748332541957,
    0.000206928465831667 };

  static const double dv11[9] = { 0.999829042316655, 0.00290536676099935,
    -0.0182604760109221, -0.00279551166806386, 0.999977859646126,
    0.00603865316653689, 0.0182776162197125, -0.00598657343862809,
    0.999815027734525 };

  for (i = 0; i < 3; i++) {
    params->CameraParameters1.RadialDistortion[i] = dv0[i];
  }

  for (i = 0; i < 2; i++) {
    params->CameraParameters1.TangentialDistortion[i] = 0.0;
  }

  params->CameraParameters1.EstimateSkew = false;
  params->CameraParameters1.NumRadialDistortionCoefficients = 3.0;
  params->CameraParameters1.EstimateTangentialDistortion = false;
  params->CameraParameters1.NumPatterns = 88.0;
  for (i = 0; i < 9; i++) {
    params->CameraParameters1.IntrinsicMatrix[i] = dv1[i];
  }

  for (i = 0; i < 2; i++) {
    params->CameraParameters1.FocalLength[i] = 541.959687988851 +
      1.7224919223859843 * (double)i;
    params->CameraParameters1.PrincipalPoint[i] = 371.925237873738 +
      -142.77603655130503 * (double)i;
  }

  params->CameraParameters1.Skew = 0.0;
  params->CameraParameters1.MeanReprojectionError = 0.145574171422347;
  for (i = 0; i < 9; i++) {
    params->CameraParameters1.IntrinsicMatrixInternal[i] = dv2[i];
  }

  for (i = 0; i < 30; i++) {
    params->CameraParameters1.Version.Name[i] = cv0[i];
  }

  for (i = 0; i < 3; i++) {
    params->CameraParameters1.Version.Version[i] = cv1[i];
  }

  for (i = 0; i < 8; i++) {
    params->CameraParameters1.Version.Release[i] = cv2[i];
  }

  for (i = 0; i < 11; i++) {
    params->CameraParameters1.Version.Date[i] = cv3[i];
  }

  for (i = 0; i < 3; i++) {
    params->CameraParameters2.RadialDistortion[i] = dv3[i];
  }

  for (i = 0; i < 2; i++) {
    params->CameraParameters2.TangentialDistortion[i] = 0.0;
  }

  params->CameraParameters2.EstimateSkew = false;
  params->CameraParameters2.NumRadialDistortionCoefficients = 3.0;
  params->CameraParameters2.EstimateTangentialDistortion = false;
  params->CameraParameters2.NumPatterns = 88.0;
  for (i = 0; i < 9; i++) {
    params->CameraParameters2.IntrinsicMatrix[i] = dv4[i];
  }

  for (i = 0; i < 2; i++) {
    params->CameraParameters2.FocalLength[i] = 543.308099976805 +
      1.8167965586469563 * (double)i;
    params->CameraParameters2.PrincipalPoint[i] = 393.735383216623 +
      -175.052619578226 * (double)i;
  }

  params->CameraParameters2.Skew = 0.0;
  params->CameraParameters2.MeanReprojectionError = 0.143241726089333;
  for (i = 0; i < 9; i++) {
    params->CameraParameters2.IntrinsicMatrixInternal[i] = dv5[i];
  }

  for (i = 0; i < 30; i++) {
    params->CameraParameters2.Version.Name[i] = cv0[i];
  }

  for (i = 0; i < 3; i++) {
    params->CameraParameters2.Version.Version[i] = cv1[i];
  }

  for (i = 0; i < 8; i++) {
    params->CameraParameters2.Version.Release[i] = cv2[i];
  }

  for (i = 0; i < 11; i++) {
    params->CameraParameters2.Version.Date[i] = cv3[i];
  }

  for (i = 0; i < 9; i++) {
    params->RotationOfCamera2[i] = dv6[i];
  }

  for (i = 0; i < 3; i++) {
    params->TranslationOfCamera2[i] = dv7[i];
  }

  for (i = 0; i < 9; i++) {
    params->FundamentalMatrix[i] = dv8[i];
    params->EssentialMatrix[i] = dv9[i];
  }

  params->MeanReprojectionError = 0.14440794875584;
  params->NumPatterns = 88.0;
  for (i = 0; i < 80; i++) {
    params->WorldPoints[i] = iv0[i];
  }

  for (i = 0; i < 2; i++) {
    params->WorldUnits[i] = 'm';
  }

  for (i = 0; i < 4; i++) {
    params->RectifyMap1.Xmap[i] = 0.0;
    params->RectifyMap1.Ymap[i] = 0.0;
    params->RectifyMap1.XmapSingle[i] = 0.0;
    params->RectifyMap1.YmapSingle[i] = 0.0;
  }

  for (i = 0; i < 2; i++) {
    params->RectifyMap1.NewOrigin[i] = 0.0;
  }

  for (i = 0; i < 4; i++) {
    params->RectifyMap2.Xmap[i] = 0.0;
    params->RectifyMap2.Ymap[i] = 0.0;
    params->RectifyMap2.XmapSingle[i] = 0.0;
    params->RectifyMap2.YmapSingle[i] = 0.0;
  }

  for (i = 0; i < 2; i++) {
    params->RectifyMap2.NewOrigin[i] = 0.0;
  }

  for (i = 0; i < 9; i++) {
    params->RectificationParams.H1.T[i] = iv1[i];
  }

  params->RectificationParams.H1.Dimensionality = 2.0;
  for (i = 0; i < 9; i++) {
    params->RectificationParams.H2.T[i] = iv1[i];
  }

  params->RectificationParams.H2.Dimensionality = 2.0;
  for (i = 0; i < 16; i++) {
    params->RectificationParams.Q[i] = iv2[i];
  }

  for (i = 0; i < 2; i++) {
    params->RectificationParams.XBounds[i] = 0.0;
    params->RectificationParams.YBounds[i] = 0.0;
  }

  params->RectificationParams.Initialized = true;
  for (i = 0; i < 2; i++) {
    params->RectificationParams.RectifiedImageSize[i] = 1.0;
  }

  for (i = 0; i < 30; i++) {
    params->Version.Name[i] = cv0[i];
  }

  for (i = 0; i < 3; i++) {
    params->Version.Version[i] = cv1[i];
  }

  for (i = 0; i < 8; i++) {
    params->Version.Release[i] = cv2[i];
  }

  for (i = 0; i < 11; i++) {
    params->Version.Date[i] = cv3[i];
  }

  for (i = 0; i < 3; i++) {
    params->r_lr[i] = dv10[i];
  }

  for (i = 0; i < 9; i++) {
    params->R_lr[i] = dv6[i];
    params->R_rl[i] = dv11[i];
  }
}

//
// File trailer for getCameraParams.cpp
//
// [EOF]
//
