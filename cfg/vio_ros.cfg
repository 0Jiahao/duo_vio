#!/usr/bin/env python2
PACKAGE = "vio_ros"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("show_tracker_images",   bool_t,   0, "Show feature tracks in camera image", True)

gen.add("im_noise",          double_t, 0, "Image (tracker) noise",           0.5, 0, 10)
gen.add("acc_noise",         double_t, 0, "Accelerometer process noise",     0.5, 0, 100000)
gen.add("gyro_noise",        double_t, 0, "Gyroscope process noise",         0.5, 0, 10)
gen.add("gyro_bias_noise",   double_t, 0, "Gyroscope bias noise",            0.5, 0, 10)

gen.add("use_pressure",      bool_t,   0, "Use FMU pressure measurement",            False)
gen.add("pressure_noise",    double_t, 0, "Pressure measurement noise",      0.5, 0, 10)

gen.add("fixed_anchor",      bool_t,   0, "Fix the uncertainty of the oldest anchor and its best feature to 0",  False)
gen.add("sigma_init",        double_t, 0, "Inverse depth init uncertainty",  0.5, 0, 1)

gen.add("gravity_align",     bool_t,   0, "Align with gravity",  False)
gen.add("gravity_alignment_noise",  double_t, 0, "Gravity alignment noise",  0.5, 0, 100)

gen.add("use_ext_pose",      bool_t,   0, "Use External pose measurement (GPS, VICON, ...)",  False)
gen.add("ext_pos_noise",     double_t, 0, "External position measurement noise",  0.5, 0, 10)
gen.add("ext_att_noise",     double_t, 0, "External attitude measurement noise",  0.5, 0, 10)

gen.add("use_controller_to_predict", bool_t, 0, "Use control commands for prediction", True)
gen.add("Kp_xy",             double_t, 0, "Proportional gain position",      0.5, 0, 10)
gen.add("Ki_xy",             double_t, 0, "Integral gain position",          0.5, 0, 10)
gen.add("Kd_xy",             double_t, 0, "Derivative gain position",        0.6, 0, 10)
gen.add("Kp_z",              double_t, 0, "Proportional gain height",        0.5, 0, 10)
gen.add("Ki_z",              double_t, 0, "Integral gain height",            0.6, 0, 10)
gen.add("Kd_z",              double_t, 0, "Derivative gain height",          0.6, 0, 10)
gen.add("Kp_yaw",            double_t, 0, "Proportional gain yaw",           0.5, 0, 10)
gen.add("Kd_yaw",            double_t, 0, "Proportional gain yaw",           1, 0, 10)
gen.add("i_lim",             double_t, 0, "Integral limit",                  1, 0, 10)

gen.add("max_ekf_iterations", int_t, 0, "Number of iterations for EKF update", 1, 1, 100)
gen.add("use_magnetometer",  bool_t, 0, "Use FMU magnetometer measurement",        False)


exit(gen.generate(PACKAGE, "vio_ros", "vio_ros"))
