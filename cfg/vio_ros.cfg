#!/usr/bin/env python2
PACKAGE = "vio_ros"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

general_group = gen.add_group("General parameters", state=True)

# general_group.add("show_tracker_images",       bool_t,   0, "Show feature tracks in camera image", True)
general_group.add("vision_subsample",          int_t,    0, "Factor by which images are subsampled wrt IMU data", 1, 1, 100)

noise_group = gen.add_group("Noise paramters", state=True)
noise_group.add("im_noise",                  double_t, 0, "Image (tracking) noise",          0.5, 0, 10)
noise_group.add("acc_noise",                 double_t, 0, "Accelerometer process noise",     0.5, 0, 10)
noise_group.add("acc_bias_noise",            double_t, 0, "Accelerometer bias noise",        0.5, 0, 10)
noise_group.add("gyro_noise",                double_t, 0, "Gyroscope process noise",         0.5, 0, 10)
noise_group.add("gyro_bias_noise",           double_t, 0, "Gyroscope bias noise",            0.5, 0, 10)
noise_group.add("inv_depth_initial_unc",     double_t, 0, "Inverse depth init uncertainty",  0.5, 0, 10)

vio_group = gen.add_group("VIO Parameters", state=True)

vio_group.add("fixed_feature",             bool_t,   0, "Fix the uncertainty of the best feature of the oldest anchor to 0",  False)
vio_group.add("delayed_initialization",    bool_t,   0, "Delay feature initialization before activating",  False)
vio_group.add("mono",                      bool_t,   0, "Monocular VIO",  False)
vio_group.add("max_ekf_iterations",        int_t,    0, "Number of iterations for EKF update", 1, 1, 100)

# vio_group.add("use_controller_to_predict", bool_t, 0, "Use control commands for prediction", True)

controller_group = gen.add_group("Controller", state=False)
controller_group.add("Kp_xy",             double_t, 0, "Proportional gain position",      0.5, 0, 10)
controller_group.add("Ki_xy",             double_t, 0, "Integral gain position",          0.5, 0, 10)
controller_group.add("Kd_xy",             double_t, 0, "Derivative gain position",        0.6, 0, 10)
controller_group.add("Kp_z",              double_t, 0, "Proportional gain height",        0.5, 0, 10)
controller_group.add("Ki_z",              double_t, 0, "Integral gain height",            0.6, 0, 10)
controller_group.add("Kd_z",              double_t, 0, "Derivative gain height",          0.6, 0, 10)
controller_group.add("Kp_yaw",            double_t, 0, "Proportional gain yaw",           0.5, 0, 10)
controller_group.add("Kd_yaw",            double_t, 0, "Proportional gain yaw",           1, 0, 10)
controller_group.add("i_lim",             double_t, 0, "Integral limit",                  1, 0, 10)

exit(gen.generate(PACKAGE, "vio_ros", "vio_ros"))
